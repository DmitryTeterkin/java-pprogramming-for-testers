package Lev13.task1327;

import java.util.ArrayList;
import java.util.List;

/*
Репка
Сказка Репка:
1. Реализовать интерфейс RepkaItem в классе Person.
2. В классе Person реализовать метод pull(Person person), который выводит фразу типа '<name> за <person>'.

Пример:
Бабка за Дедку
Дедка за Репку

3. Исправить логическую ошибку цикла в методе tell класса RepkaStory.
4. Выполнить метод main и наслаждаться сказкой!


Требования:
1. Интерфейс RepkaItem должен быть реализован в классе Person.
2. В классе Person должен быть реализован метод pull c одним параметром типа Person.
3. Метод pull в классе Person должен выводить на экран фразу типа ' за '. Например: Бабка за Дедку.
4. В результате выполнения метода main на экран должен быть выведен краткий вариант сказки про Репку.

 Да вам нужно будет раскрыть все дерево программы и использовать классы находящиеся там.
 В IntelijIDEA слева вверху графа Project, раскрывает древо, там же находите task13 --- task 1327. и вносите
 изменения в классы. С реализацией интерфейса все понятно - реализуйте его в классе Person. Напишите новый метод
 pull  с параметром(аргументом) Person person, в методе реализуйте вывод систем аут с геттером + " за " + персон.геттером падежа.
 Ну а чтобы порядок вывода был правильным в репка стори в цикле поменяйте местами индексы в ссылках ферст и секонд.
  Не всегда бывает понятно, что же хочет валидатор))
 решил два раза правильно, но валидатор принял вторую попытку, так как сделал  <person> за <name> , вывод был верный,
 падежи тоже

 */

public class Task1327done {
  public static void main(String[] args) {
    List<Person> plot = new ArrayList<Person>();
    plot.add(new Person("Репка", "Репку"));
    plot.add(new Person("Дедка", "Дедку"));
    plot.add(new Person("Бабка", "Бабку"));
    plot.add(new Person("Внучка", "Внучку"));
    RepkaStory.tell(plot);
  }
}
